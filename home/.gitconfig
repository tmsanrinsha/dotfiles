[alias]
	br = branch
	co = checkout
	ci = commit
	# 外部エディタを起動せず、diffを単語単位で
	d = diff --no-ext-diff
	dw = diff --no-ext-diff --word-diff

	## log
	# [A better git log (Example)](https://coderwall.com/p/euwpig/a-better-git-log)
	# --pretty-formatの設定については [Git - git-log Documentation](https://git-scm.com/docs/git-log)
	graph = "log --graph --date=short --pretty=format:'%C(auto)%h%d %s (%ad) <%an>%Creset'"
	# すべてのブランチのlogがみたいときは--allを付ける

	push = push -u
	st = status
	rt = remote -v

	branch-all = !git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*' && git fetch

	# Githubのpushのurlをsshに変更
	rtc = !git remote set-url --push `git remote -v | sed -e '1d' -e 's|://\\([^/]*\\)/\\([^(]*\\).*$|@\\1:\\2|'` && git remote -v
	ctags = !.git/hooks/ctags
	resolve-merge-theirs = !git checkout --theirs . && git add . && git commit
	resolve-merge-ours = !git checkout --ours . && git add . && git commit
	resolve-rebase-theirs = !git checkout --ours . && git add . && git rebase --continue
	resolve-rebase-ours = !git checkout --theirs . && git add . && git rebase --continue

	# [Keep your git directory clean with `git clean` and `git trash`](https://coderwall.com/p/g16jpq/keep-your-git-directory-clean-with-git-clean-and-git-trash)
	# git option
	#   --others
	#     Show other (i.e. untracked) files in the output
	#   --exclude-standard
	#     Add the standard Git exclusions: .git/info/exclude, .gitignore in each directory, and the user's global exclusion file.
	#   -t
	# mv option
	#   -f
	#     do not prompt before overwriting
	#   -t
	#     move all SOURCE arguments into DIRECTORY
	trash = !mkdir -p .trash && git ls-files --others --exclude-standard | xargs mv -f -t .trash

	# [Commit Hash から、該当 Pull Request を見つける方法 - Qiita](http://qiita.com/awakia/items/f14dc6310e469964a8f7)
	showpr = "!f() { git log --merges --oneline --reverse --ancestry-path $1...master | grep 'Merge pull request #' | head -n 1; }; f"
	openpr = "!f() { hub browse -- `git log --merges --oneline --reverse --ancestry-path $1...master | grep 'Merge pull request #' | head -n 1 | cut -f5 -d' ' | sed -e 's%#%pull/%'`; }; f"

	# hub
	pull-request = !hub -c core.commentChar='%' pull-request
	pr = !hub -c core.commentChar='%' pull-request
	fork = !hub fork
	create = !hub create
	browse = !hub browse
	compare = !hub compare
	release = !hub release
	issue = !hub  -c core.commentChar='%' issue
	ci-status = !hub ci-status
[color]
	ui = auto
[core]
	pager =
	# editor = vim ここで設定せずに$EDITORに設定されたものを使う
	# グローバルなgitignore
	excludesfile = ~/.config/git/.gitignore
	quotepath = false
	; commentchar = #
[diff]
	# external = git_diff_vim
	# 賢いdiff algorithm
	# http://www.justinleegrant.com/?p=339
	algorithm = patience
[fetch]
	# remote branchが消されたら、そのremote tracking branchをfetchのタイミングで消す
	prune = true
[merge]
	tool = diffconflicts
[mergetool "diffconflicts"]
	cmd = diffconflicts vim $BASE $LOCAL $REMOTE $MERGED
	trustExitCode = true
	keepBackup = false
[pager]
	diff =
[push]
	# [gitのpush.defaultに関するノウハウ - Qiita](https://qiita.com/awakia/items/6aaea1ffecba725be601)
	# pushでrefspecが与えられたかったときにカレントブランチと同じブランチにpushする
	default = current
[rebase]
	# stashが必要なときに自動的にする
	autostash = true

# githubでhttpsのURLを指定してもgitプロトコルやssh経由にする方法 - @znz blog
# http://blog.n-z.jp/blog/2013-11-28-git-insteadof.html
[url "git@github.com:"]
	pushInsteadOf = https://github.com/

[init]
	templatedir = ~/.git_template

[rerere]
	enabled = true

[prevent-push-master]
	allow = tmsanrinsha
	allow = heroku

[ghq]
	root = ~/src
	root = ~/go/src

[include]
	# 環境ごとに違う設定は別ファイルでやる
	# includeが使えるかはgit config --global --includes -lで確かめる
	# 使わない場合はGIT_AUTHOR_EMAILなどの環境変数で設定する方法がある。
	# see man git
	path = .gitconfig.local

# vim: noexpandtab
