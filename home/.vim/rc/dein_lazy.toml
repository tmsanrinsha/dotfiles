# unite {{{1
# ============================================================================
[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = 'Unite'
hook_source = '''
    source ~/.vim/rc/plugins/unite_hook_source.vim
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'unite.vim'
hook_source = '''
    call unite#custom#source(
    \'neomru/file', 'ignoer_pattern',
    \'\~$\|\.\%(o\|exe\|dll\|bak\|zwc\|pyc\|sw[po]\)$'.
    \'\|\%(^\|/\)\.\%(hg\|git\|bzr\|svn\)\%($\|/\)'.
    \'\|^\%(\\\\\|/mnt/\|/media/\|/temp/\|/tmp/\|\%(/private\)\=/var/folders/\)'.
    \'\|\%(^\%(fugitive\)://\)'.
    \'\|/mnt/'
    \)
'''

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.vim'
hook_source = '''
    call unite#sources#outline#alias('mql4', 'cpp')
    call unite#sources#outline#alias('ref-man', 'man')
    call unite#sources#outline#alias('rmd', 'markdown')
    call unite#sources#outline#alias('tmux', 'conf')
    call unite#sources#outline#alias('vimperator', 'conf')
    call unite#sources#outline#alias('zsh', 'conf')
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'unite.vim'

[[plugins]]
repo = 'basyura/unite-mdfind'
on_source = 'unite.vim'
# }}}

[[plugins]]
repo = 'Shougo/vimfiler.vim'
on_source = 'unite.vim'
on_map = '<Plug>'

# vimshell {{{1
# ============================================================================
[[plugins]]
repo = 'Shougo/vimshell.vim'
depends = ['vim-vcs', 'unite.vim']
on_cmd = ['VimShell', 'VimShellBufferDir', 'VimShellInteractive', 'VimShellPop']

[[plugins]]
repo = 'Shougo/vim-vcs'
# }}}

[[plugins]]
repo = 'oplatek/Conque-Shell'
on_cmd = ['ConqueTerm', 'ConqueTermSplit', 'ConqueTermTab', 'ConqueTermVSplit']
hook_source = 'source ~/.vim/rc/plugins/Conque-Shell_hook_source.vim'

# neocomplete {{{1
# ============================================================================
[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = [
    'FastFold'
    'neoinclude.vim',
    'neosnippet.vim', 'vim-snippets'
]
on_i = 1
hook_source = 'source ~/.vim/rc/plugins/neocomplete_hook_source.vim'
# vim_version = '7.3.825'

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml']
# vim_version = '7.3.825'

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_source = 'source ~/.vim/rc/plugins/neosnippet_hook_source.vim'

[[plugins]]
repo = 'honza/vim-snippets'

# [[plugins]]
# repo = 'SirVer/ultisnips'

# operator {{{1
# ============================================================================
[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = '<plug>(operator-surround-'

[[plugins]]
repo = 'tyru/operator-camelize.vim'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-camelize-'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-replace)'

[[plugins]]
repo = 'osyo-manga/vim-operator-search'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-search)'

[[plugins]]
repo = 'tyru/caw.vim'
depends = ['vim-operator-user', 'vim-repeat', 'context_filetype.vim']
on_map = '<Plug>(caw:'
hook_add = '''
    nmap gc <Plug>(caw:hatpos:toggle:operator)
    xmap gc <Plug>(caw:hatpos:toggle:operator)
    nmap gcc <Plug>(caw:hatpos:toggle)
    nmap <C-_> yy<Plug>(caw:hatpos:toggle)p
    xmap <C-_> ygv<Plug>(caw:hatpos:toggle)gv<C-c>p
'''

# [[plugins]]
# repo = 'tomtom/tcomment_vim'
# on_map = ['<Plug>TComment_', 'gc']

# textobj {{{1
# ============================================================================
# [[plugins]]
# repo = 'kana/vim-textobj-entire'
# on_map = '<Plug>(textobj-entire'

[[plugins]]
repo = 'osyo-manga/vim-textobj-context'
on_map = '<Plug>(textobj-context-'

[[plugins]]
repo = 'kana/vim-textobj-lastpat'
on_map = '<Plug>(textobj-lastpat-'

[[plugins]]
repo = 'glts/vim-textobj-comment'
on_map = '<Plug>(textobj-comment-'
# }}}

[[plugins]]
repo = 'kana/vim-smartword'
on_map = '<Plug>'

# bufferを閉じてもレイアウトを崩さない
[[plugins]]
repo = 'moll/vim-bbye'
on_cmd = 'Bdelete'
hook_add = '''
    nnoremap <Leader>bd :<C-U>Bdelete<CR>
'''

# tmsanrinsha/vim-fakeclip {{{
[[plugins]]
repo = 'tmsanrinsha/vim-fakeclip'
if = "$SSH_CLIENT != ''"
on_map = '<Plug>'
hook_add = '''
    xmap  "&D           <Plug>(fakeclip-screen-D)
    nmap  "&D           <Plug>(fakeclip-screen-D)
    nmap  "&dd          <Plug>(fakeclip-screen-dd)
    xmap  "&d           <Plug>(fakeclip-screen-d)
    nmap  "&d           <Plug>(fakeclip-screen-d)
    xmap  "&[P          <Plug>(fakeclip-screen-[P)
    xmap  "&[p          <Plug>(fakeclip-screen-[p)
    xmap  "&]P          <Plug>(fakeclip-screen-]P)
    xmap  "&]p          <Plug>(fakeclip-screen-]p)
    xmap  "&gP          <Plug>(fakeclip-screen-gP)
    xmap  "&gp          <Plug>(fakeclip-screen-gp)
    xmap  "&P           <Plug>(fakeclip-screen-P)
    xmap  "&p           <Plug>(fakeclip-screen-p)
    nmap  "&[P          <Plug>(fakeclip-screen-[P)
    nmap  "&[p          <Plug>(fakeclip-screen-[p)
    nmap  "&]P          <Plug>(fakeclip-screen-]P)
    nmap  "&]p          <Plug>(fakeclip-screen-]p)
    nmap  "&gP          <Plug>(fakeclip-screen-gP)
    nmap  "&gp          <Plug>(fakeclip-screen-gp)
    nmap  "&P           <Plug>(fakeclip-screen-P)
    nmap  "&p           <Plug>(fakeclip-screen-p)
    xmap  "&Y           <Plug>(fakeclip-screen-Y)
    xmap  "&y           <Plug>(fakeclip-screen-y)
    nmap  "&yy          <Plug>(fakeclip-screen-Y)
    nmap  "&Y           <Plug>(fakeclip-screen-Y)
    nmap  "&y           <Plug>(fakeclip-screen-y)
    xmap  "*D           <Plug>(fakeclip-D)
    nmap  "*D           <Plug>(fakeclip-D)
    nmap  "*dd          <Plug>(fakeclip-dd)
    xmap  "*d           <Plug>(fakeclip-d)
    nmap  "*d           <Plug>(fakeclip-d)
    xmap  "*[P          <Plug>(fakeclip-[P)
    xmap  "*[p          <Plug>(fakeclip-[p)
    xmap  "*]P          <Plug>(fakeclip-]P)
    xmap  "*]p          <Plug>(fakeclip-]p)
    xmap  "*gP          <Plug>(fakeclip-gP)
    xmap  "*gp          <Plug>(fakeclip-gp)
    xmap  "*P           <Plug>(fakeclip-P)
    xmap  "*p           <Plug>(fakeclip-p)
    nmap  "*[P          <Plug>(fakeclip-[P)
    nmap  "*[p          <Plug>(fakeclip-[p)
    nmap  "*]P          <Plug>(fakeclip-]P)
    nmap  "*]p          <Plug>(fakeclip-]p)
    nmap  "*gP          <Plug>(fakeclip-gP)
    nmap  "*gp          <Plug>(fakeclip-gp)
    nmap  "*P           <Plug>(fakeclip-P)
    nmap  "*p           <Plug>(fakeclip-p)
    xmap  "*Y           <Plug>(fakeclip-Y)
    xmap  "*y           <Plug>(fakeclip-y)
    nmap  "*yy          <Plug>(fakeclip-Y)
    nmap  "*Y           <Plug>(fakeclip-Y)
    nmap  "*y           <Plug>(fakeclip-y)
    xmap  "+D           <Plug>(fakeclip-D)
    nmap  "+D           <Plug>(fakeclip-D)
    nmap  "+dd          <Plug>(fakeclip-dd)
    xmap  "+d           <Plug>(fakeclip-d)
    nmap  "+d           <Plug>(fakeclip-d)
    xmap  "+[P          <Plug>(fakeclip-[P)
    xmap  "+[p          <Plug>(fakeclip-[p)
    xmap  "+]P          <Plug>(fakeclip-]P)
    xmap  "+]p          <Plug>(fakeclip-]p)
    xmap  "+gP          <Plug>(fakeclip-gP)
    xmap  "+gp          <Plug>(fakeclip-gp)
    xmap  "+P           <Plug>(fakeclip-P)
    xmap  "+p           <Plug>(fakeclip-p)
    nmap  "+[P          <Plug>(fakeclip-[P)
    nmap  "+[p          <Plug>(fakeclip-[p)
    nmap  "+]P          <Plug>(fakeclip-]P)
    nmap  "+]p          <Plug>(fakeclip-]p)
    nmap  "+gP          <Plug>(fakeclip-gP)
    nmap  "+gp          <Plug>(fakeclip-gp)
    nmap  "+P           <Plug>(fakeclip-P)
    nmap  "+p           <Plug>(fakeclip-p)
    xmap  "+Y           <Plug>(fakeclip-Y)
    xmap  "+y           <Plug>(fakeclip-y)
    nmap  "+yy          <Plug>(fakeclip-Y)
    nmap  "+Y           <Plug>(fakeclip-Y)
    nmap  "+y           <Plug>(fakeclip-y)
    imap  <C-R><C-P>&   <Plug>(fakeclip-screen-insert-p)
    map!  <C-R><C-O>&   <Plug>(fakeclip-screen-insert-o)
    map!  <C-R><C-R>&   <Plug>(fakeclip-screen-insert-r)
    map!  <C-R>&        <Plug>(fakeclip-screen-insert)
    imap  <C-R><C-P>*   <Plug>(fakeclip-insert-p)
    map!  <C-R><C-O>*   <Plug>(fakeclip-insert-o)
    map!  <C-R><C-R>*   <Plug>(fakeclip-insert-r)
    map!  <C-R>*        <Plug>(fakeclip-insert)
    imap  <C-R><C-P>+   <Plug>(fakeclip-insert-p)
    map!  <C-R><C-O>+   <Plug>(fakeclip-insert-o)
    map!  <C-R><C-R>+   <Plug>(fakeclip-insert-r)
    map!  <C-R>+        <Plug>(fakeclip-insert)
'''
# }}}

[[plugins]]
repo = 'tmsanrinsha/DirDiff.vim'
on_cmd = 'DirDiff'

[[plugins]]
repo = 'osyo-manga/vim-marching'
on_ft = ['c', 'cpp']
hook_source = 'source ~/.vim/rc/plugins/marching_hook_source.vim'

[[plugins]]
repo = 'quark-zju/vim-cpp-auto-include'
external_commands = 'ruby'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'xml', 'apache', 'php']

[[plugins]]
repo = 'maksimr/vim-jsbeautify'
external_commands = 'node'
on_ft = ['javascript', 'css', 'html']

# Go lang {{{1
# ============================================================================
repo = 'fatih/vim-go'
on_ft = 'go'

# PHP {{{1
# ============================================================================
[[plugins]]
repo = 'mkusher/padawan.vim'
if = '$PHP55'
on_ft = 'php'
hook_source = '''
let g:padawan#composer_command = 'composer'
let g:padawan#timeout = 0.3
'''
# [does not obey @property dockblock · Issue #26 · mkusher/padawan.php](https://github.com/mkusher/padawan.php/issues/26)
# [Completion scopes and built\-in php functions by mkusher · Pull Request \#14 · mkusher/padawan\.php](https://github.com/mkusher/padawan.php/pull/14#event-612270301)

[[plugins]]
repo = 'stephpy/vim-php-cs-fixer'
on_cmd = ['PhpCsFixerFixDirectory', 'PhpCsFixerFixFile']

# Python {{{1
# ============================================================================
[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python']
hook_source = 'source ~/.vim/rc/plugins/jedi_hook_source.vim'

[[plugins]]
repo = 'lambdalisue/vim-pyenv'
depends = ['jedi-vim']
on_ft = ['python', 'python3']

# ruby {{{1
# ============================================================================
[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = 'ruby'

[[plugins]]
repo = 'osyo-manga/vim-monster'
on_ft = 'ruby'
# # debug
# let g:monster#debug#enable=1 
# echo monster#debug#log()
# call monster#debug#clear_log()#
#
# # rcodetools進んでいるリポジトリ
# https://github.com/raa0121/rcodetools
#
# # rsenseのvim plugin
# https://github.com/marcus/rsense
# }}}

# vim {{{1
# ============================================================================
[[plugins]]
repo = 'rbtnn/vimconsole.vim'
on_func = 'vimconsole#log'
on_cmd = 'VimConsoleTogggle'
# }}}

[[plugins]]
repo = 'tmsanrinsha/previm'
on_cmd = ['PrevimOpen']
on_ft = ['markdown']
depends = 'open-browser.vim'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_cmd = ['TableModeToggle', 'Tableize', 'TableAddFormula', 'TableEvalFormulaLine']
on_func = 'tablemode#Toggle'
hook_add = '''
    nnoremap [:table-mode:] <Nop>
    nmap <Leader>t [:table-mode:]
    map [:table-mode:]m :call tablemode#Toggle()<CR>
'''

[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'
on_cmd = ['AnsiEsc']

[[plugins]]
repo = 'LeafCage/yankround.vim'
on_map = '<Plug>'
on_sources = 'unite.vim'
# vim_version = '7.3'

[[plugins]]
repo = 'sjl/gundo.vim'
on_cmd = 'GundoToggle'

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1
hook_source = 'source ~/.vim/rc/plugins/lexima_hook_source.vim'

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
on_map = '<Plug>(easymotion-'
hook_add = '''
    map ' <Plug>(easymotion-s2)
    " map ' <Plug>(easymotion-bd-jk)
    " map f <Plug>(easymotion-fl)
    " map t <Plug>(easymotion-tl)
    " map F <Plug>(easymotion-Fl)
    " map T <Plug>(easymotion-Tl)
'''
hook_source = '''
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_keys = 'asdfgghjkl;:qwertyuiop@zxcvbnm,./1234567890-'
    let g:EasyMotion_do_mapping = 0
'''

[[plugins]]
repo = 'thinca/vim-ref'
on_cmd = ['Ref', 'Man']
hook_source = '''
    if has('mac')
        let g:ref_man_cmd = 'man -P cat'
    endif
    " command! -nargs=* Man Ref man <args>
'''

[[plugins]]
repo = 'kannokanno/vim-helpnew'
on_cmd = 'HelpNew'

[[plugins]]
repo = "vim-utils/vim-man"
on_cmd = 'Man'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
depends = ['shabadou.vim', 'vim-hier', 'quickfixstatus', 'vim-qfsigns', 'vim-qfstatusline']
hook_source = 'source ~/.vim/rc/plugins/quickrun_hook_source.vim'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = ['vim-quickrun', 'vim-bufixlist']
hook_source = 'source ~/.vim/rc/plugins/watchdogs_hook_source.vim'

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'KazuakiM/vim-qfsigns'

[[plugins]]
repo = 'KazuakiM/vim-qfstatusline'
hook_source = '''
    let g:Qfstatusline#Text = 'E'
'''

[[plugins]]
repo = 'osyo-manga/vim-bufixlist'

[[plugins]]
repo = 'joonty/vdebug'
on_ft = ['php']

[[plugins]]
repo = 'thinca/vim-partedit'
on_cmd = 'Partedit'

[[plugins]]
repo = 'simeji/winresizer'
on_cmd = 'WinResizerStartResize'
hook_add = '''
  let g:winresizer_start_key = '<M-w>'
  nmap <M-w> :<C-u>WinResizerStartResize<CR>
'''

[[plugins]]
repo = 't9md/vim-quickhl'
on_map = '<Plug>(quickhl-'

[[plugins]]
repo = 'DrawIt'
on_map = ';di'
on_cmd = 'DrawIt'

# browser {{{1
# ============================================================================
[[plugins]]
repo = 'tyru/open-browser.vim'
on_func = ['openbrowser#search', 'OpenBrowser']
on_map = '<Plug>(openbrowser-'
hook_source = '''
    source ~/.vim/rc/plugins/open-browser_hook_source.vim
'''

[[plugins]]
repo= 'tyru/open-browser-github.vim'
depends = 'open-browser.vim'
on_cmd = ['OpenGithubFile', 'OpenGithubIssue', 'OpenGithubPullReq']
hook_source = '''
    let g:openbrowser_github_always_use_commit_hash = 0
    let g:openbrowser_github_url_exists_check = 'ignore'
'''

[[plugins]]
repo = 'shikato/vim2browser.vim'
on_cmd = ['Vim2BrowserSetVimAppName', 'Vim2ChromeReplaseAll', 'Vim2ChromeReplaseSelected', 'Vim2ChromeAppendAll', 'Vim2ChromeAppendSelected', 'Chrome2VimReplaseAll', 'Chrome2VimReplaseSelected', 'Chrome2VimAppendAll', 'Chrome2VimAppendSelected']

[[plugins]]
repo = 'shikato/keysender.vim'
on_cmd = ['KeysenderKeystroke', 'KeysenderKeyCode', 'KeysenderSetTargetAppName', 'KeysenderSetVimAppName']
# }}}

# search, replace {{{1
# ============================================================================
[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>(asterisk-'

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_source = 'unite.vim'

# memo {{{1
# ============================================================================
[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew', 'MemoList', 'MemoGrep']
hook_add = '''
    nnoremap <Leader>mn  :MemoNew<CR>
    nnoremap <Leader>ml  :Unite memo<CR>
    execute 'nnoremap <Leader>mg :<C-u>Unite grep:'.g:memo_directory.'<CR>'
'''
hook_source = '''
    let g:memolist_path = g:memo_directory.'/'.strftime('%Y/%m')
    let g:memolist_memo_suffix = 'md'
    let g:memolist_template_dir_path = '~/.vim/template/memolist'
    let g:memolist_unite = 1
'''

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'unite.vim'
on_cmd = ['Junkfile', 'JunkfileOpen', 'JunkfileFiletype']

[[plugins]]
repo = 'mattn/qiita-vim'
on_source = 'unite.vim'
on_cmd = ['Qiita']

[[plugins]]
repo = 'mattn/gist-vim'
depends = 'webapi-vim'
on_cmd = ['Gist']

[[plugins]]
repo = 'neilagabriel/vim-geeknote'
on_cmd = ['Geeknote']
hook_source = '''
    call Set_python_path()
'''
# }}}

[[plugins]]
repo = 'gregsexton/gitv'
on_cmd = ['Gitv']
hook_source = '''
    function! GitvGetCurrentHash()
        return matchstr(getline('.'), '\[\zs.\{7\}\ze\]$')
    endfunction

    autocmd MyVimrc FileType gitv
        \   setlocal iskeyword+=/,-,.
        \|  nnoremap <buffer> <LocalLeader>rb :<C-u>Git rebase -i    <C-r>=GitvGetCurrentHash()<CR><CR>
        \|  nnoremap <buffer> <LocalLeader>rv :<C-u>Git revert       <C-r>=GitvGetCurrentHash()<CR><CR>
        \|  nnoremap <buffer> <LocalLeader>h  :<C-u>Git cherry-pick  <C-r>=GitvGetCurrentHash()<CR><CR>
        \|  nnoremap <buffer> <LocalLeader>rh :<C-u>Git reset --hard <C-r>=GitvGetCurrentHash()<CR><CR>
'''

[[plugins]]
repo = 'lilydjwg/colorizer'
on_cmd = ['ColorToggle']

[[plugins]]
repo = 'epeli/slimux'
