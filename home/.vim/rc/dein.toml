# on_mapなどがあるとlazy = 1を設定しなくてもlazyになる

[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
nnoremap [:dein:] <Nop>
nmap <Leader>D [:dein:]
nnoremap [:dein:]c :<C-u>call dein#clear_state()<CR>
" lazyの設定を変更した時はやったほうがいいかも
nnoremap [:dein:]C :<C-u>call dein#recache_runtimepath()<CR>
nnoremap [:dein:]u :<C-u>call dein#update()<CR>

" 不要なプラグインを削除する
nnoremap [:dein:]d :call map(dein#check_clean(), "delete(v:val, 'rf')") <Bar> call dein#recache_runtimepath()<CR>
" y/nを付けたいならこちら
" [dein.vimで未使用プラグインを削除するコマンドを定義する | Vimとボクと、ときどき、PHP](http://tti.matrix.jp/blog/2016-04-19/dein-vim%E3%81%A7%E6%9C%AA%E4%BD%BF%E7%94%A8%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E5%AE%9A%E7%BE%A9/)

" repo以下のautoloadを保存したら.dein以下にコピーする {{{2
" ----------------------------------------------------------------------------
" dein.vimは.dein以下にautoloadをコピーし、それを使うので、pluginのデバック時に
" repo以下を編集・保存したら.dein以下にコピーするようにする
" *: 0個以上の文字にマッチ
" **: ディレクトリにのみマッチ
let s:sync_save_dir_list = []

for dir in ['autoload', 'colors', 'ftplugin', 'indent', 'plugin']
  let s:sync_save_dir = {
  \      'glob' : g:dein_dir . '/repos/**/' . dir . '/*.vim',
  \      'from' : g:dein_dir . '/repos/.*/' . dir . '',
  \      'to'   : g:dein_dir . '/.cache/.vimrc/.dein/' . dir . '',
  \    }

  call insert(s:sync_save_dir_list, s:sync_save_dir)
endfor

" let s:sync_save_dir_list = [
" \    {
" \      'glob' : g:dein_dir . '/repos/**/autoload/*.vim',
" \      'from' : g:dein_dir . '/repos/.*/autoload',
" \      'to'   : g:dein_dir . '/.cache/.vimrc/.dein/autoload',
" \    },
" \    {
" \      'glob' : g:dein_dir . '/repos/**/colors/*.vim',
" \      'from' : g:dein_dir . '/repos/.*/colors',
" \      'to'   : g:dein_dir . '/.cache/.vimrc/.dein/colors',
" \    },
" \    {
" \      'glob' : g:dein_dir . '/repos/**/ftplugin/*.vim',
" \      'from' : g:dein_dir . '/repos/.*/ftplugin',
" \      'to'   : g:dein_dir . '/.cache/.vimrc/.dein/ftplugin',
" \    },
" \    {
" \      'glob' : g:dein_dir . '/repos/**/indent/*.vim',
" \      'from' : g:dein_dir . '/repos/.*/indent',
" \      'to'   : g:dein_dir . '/.cache/.vimrc/.dein/indent',
" \    },
" \    {
" \      'glob' : g:dein_dir . '/repos/**/plugin/*.vim',
" \      'from' : g:dein_dir . '/repos/.*/plugin',
" \      'to'   : g:dein_dir . '/.cache/.vimrc/.dein/plugin',
" \    },
" \]

" windowsのときはうまくいかない
if $OS !~ 'Windows_NT'
  call SetAutocmdSyncSaveDir(s:sync_save_dir_list)
endif
" }}}
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
lazy = 1
build = 'make'
if = 'executable("cc") && $OS !~ "Windows_NT"'

# Neovim compatible {{{1
# ============================================================================
[[plugins]]
repo = 'roxma/nvim-yarp'
if = '!has("nvim")'
# hook_add = '''
# let g:python3_host_prog = expand('~/bin/python-debug.sh')
# '''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '!has("nvim")'
hook_add = '''
" これを指定してないとpythonxの実行でエラーになる
set pyxversion=3
'''

# unite.vim, vimfiler {{{1
# ============================================================================
[[plugins]]
repo = 'Shougo/unite.vim'
lazy = 1
depends = ['neomru.vim']
on_cmd = 'Unite'
hook_source = '''
    call SourceRc('plugins/unite_hook_source.vim')
'''

[[plugins]]
repo = 'Shougo/unite-outline'
lazy = 1
on_source = 'unite.vim'
hook_source = '''
    call unite#sources#outline#alias('mql4', 'c')
    call unite#sources#outline#alias('ref-man', 'man')
    call unite#sources#outline#alias('rmd', 'markdown')
    call unite#sources#outline#alias('tmux', 'conf')
    call unite#sources#outline#alias('vimperator', 'conf')
    call unite#sources#outline#alias('zsh', 'conf')
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
lazy = 1
on_source = 'unite.vim'

[[plugins]]
repo = 'basyura/unite-mdfind'
lazy = 1
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
lazy = 1
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord', 'DeniteProjectDir']
if = 'has("python3")'
hook_source = '''
    call SourceRc('plugins/denite_hook_source.vim')
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
lazy = 1
hook_add = '''
    "最近使用したファイル一覧
    nnoremap <silent> [unite]fm :<C-U>Unite neomru/file<CR>
    "最近使用したディレクトリ一覧
    nnoremap <silent> [unite]dm :<C-U>Unite neomru/directory<CR>

    " ファイルへの書き込みを60秒ごとにする
    let g:neomru#update_interval = 60
    " ファイルが存在するかチェックする
    let g:neomru#do_validate = 1

    let g:neomru#file_mru_limit = 2000
'''

[[plugins]]
repo = 'tmsanrinsha/unite-ghq'
build = "test -f ~/bin/ghq-list.sh || ln -s `pwd`/bin/ghq-list.sh ~/bin"

[[plugins]]
repo = 'thinca/vim-unite-history'

# [[plugins]]
# repo = 'ujihisa/unite-locate'

[[plugins]]
repo = 'tacroe/unite-mark'

[[plugins]]
repo = 'tsukkee/unite-tag'

[[plugins]]
repo = 'rhysd/unite-zsh-cdr.vim'

[[plugins]]
repo = 'Shougo/neossh.vim'

[[plugins]]
repo = 'ujihisa/vimshell-ssh'

# neocomplete, deoplete {{{1
# ============================================================================
# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# depends = [
#   'FastFold',
#   'neoinclude.vim',
#   'neosnippet.vim',
#   'vim-snippets',
#   'nvim-yarp',
#   'vim-hug-neovim-rpc'
# ]
# on_i = 1
# hook_source = 'call SourceRc("plugins/deoplete_hook_source.vim")'
# if = 'EnableDeoplete()'
#
# [[plugins]]
# repo = 'Shougo/neocomplete.vim'
# depends = [
#   'FastFold',
#   'neoinclude.vim',
#   'neosnippet.vim',
#   'vim-snippets'
# ]
# on_i = 1
# hook_source = 'call SourceRc("plugins/neocomplete_hook_source.vim")'
# if = '!EnableDeoplete()'

[[plugins]]
repo = 'Konfekt/FastFold'
lazy = 1

[[plugins]]
repo = 'Shougo/neco-vim'
lazy = 1
on_ft = ['vim', 'toml']

[[plugins]]
repo = 'Shougo/neoinclude.vim'
lazy = 1

[[plugins]]
repo = 'Shougo/neosnippet.vim'
lazy = 1
hook_source = 'call SourceRc("plugins/neosnippet_hook_source.vim")'

[[plugins]]
repo = 'honza/vim-snippets'
lazy = 1

# [[plugins]]
# repo = 'SirVer/ultisnips'

[[plugins]]
repo = 'Shougo/neco-syntax'
lazy = 1

# [[plugins]]
# repo = 'ujihisa/neco-look'
# external_commands = 'look'
# vim_version = '7.3.825'

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'inkarkat/vim-SyntaxRange'
lazy = 1
on_cmd = ['SyntaxIgnore', 'SyntaxInclude']
on_func = ['SyntaxRange']
depends = 'vim-scripts/ingo-library'

[[plugins]]
repo = 'tmsanrinsha/deoplete-mozc'
if = 'EnableDeoplete()'

# snippet {{{1
# ============================================================================
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# template {{{1
# ============================================================================
[[plugins]]
repo = 'thinca/vim-template'
# lazy = 1

# operator {{{1
# ============================================================================
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-surround'
# lazy = 1

# textobj {{{1
# ============================================================================
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
# lazyにすると最初の"*yieでクリップボードではなく、ヤンクされる
repo = 'kana/vim-textobj-entire'
# lazy = 1

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
# lazy = 1

[[plugins]]
repo = 'kana/vim-textobj-function'
# lazy = 1

[[plugins]]
repo = 'kentaro/vim-textobj-function-php'

[[plugins]]
repo = 'kana/vim-textobj-indent'
# lazy = 1

[[plugins]]
repo = 'rhysd/vim-textobj-conflict'
# lazy = 1

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
# lazy = 1

# [[plugins]]
# repo = 'anyakichi/vim-textobj-xbrackets'

# gf {{{1
# ============================================================================
[[plugins]]
repo = 'kana/vim-gf-user'
# lazy = 1

[[plugins]]
repo = 'kana/vim-gf-diff'
# lazy = 1

# <C-a>, <C-x> {{{1
# ============================================================================
# hoge-1で<C-a>したときにhoge-2にする
[[plugins]]
repo = 'osyo-manga/vim-trip'
lazy = 1
on_map = '<Plug>'
hook_add = '''
nmap <C-a> <Plug>(trip-increment)
nmap <C-x> <Plug>(trip-decrement)
'''

# [[plugins]]
# repo = 'tmsanrinsha/monday'
# hook_add = '''
# nmap <C-a> <Plug>(monday-increase)
# nmap <C-x> <Plug>(monday-decrease)
#
# call monday#add_word_pair('一', '二')
# call monday#add_word_pair('二', '三')
# call monday#add_word_pair('三', '四')
# call monday#add_word_pair('四', '五')
# call monday#add_word_pair('五', '六')
# call monday#add_word_pair('六', '七')
# call monday#add_word_pair('七', '八')
# call monday#add_word_pair('八', '九')
# call monday#add_word_pair('九', '一')
# '''

# indent {{{1
# ============================================================================
[[plugins]]
repo = 'ciaranm/detectindent'
lazy = 1
on_cmd = 'DetectIndent'

# 重い
# [[plugins]]
# repo = 'tpope/vim-sleuth'
# }}}

[[plugins]]
repo = 'easymotion/vim-easymotion'
lazy = 1
on_map = {no = '<Plug>'}
hook_add = '''
    map ' <Plug>(easymotion-overwin-f2)
    map f <Plug>(easymotion-fl)
    map t <Plug>(easymotion-tl)
    nmap ct c<Plug>(easymotion-tl)
    map F <Plug>(easymotion-Fl)
    map T <Plug>(easymotion-Tl)
    " map ' <Plug>(easymotion-bd-jk)
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_keys = 'asdfgghjkl;:qwertyuiop@zxcvbnm,./1234567890-'
    let g:EasyMotion_do_mapping = 0
'''

# [[plugins]]
# repo = 'kana/vim-submode'

# [[plugins]]
# repo = 'terryma/vim-multiple-cursors'

# [[plugins]]
# repo = 'tmsanrinsha/diffchar.vim'

# [[plugins]]
# repo = 'majutsushi/tagbar'
# lazy = 1

[[plugins]]
repo = 'osyo-manga/vital-coaster'

[[plugins]]
repo = 'tmsanrinsha/vim-emacscommandline'
# 初回にcommand line windowに入った時はまだマップが効かない
# lazy = 1
# on_event = 'CmdwinEnter'

# project {{{1
# ============================================================================
[[plugins]]
repo = 'tpope/vim-projectionist'
# lazy = 1

# [[plugins]]
# repo = 'airblade/vim-rooter'
# # lazy = 1
# hook_add = '''
# let g:rooter_manual_only = 1
# let g:rooter_patterns = [
# \ '.git', '.git/', '_darcs/', '.hg/', '.bzr/', '.svn/',
# \ 'composer.json'
# \]
# '''
# }}}

[[plugins]]
repo = 'tpope/vim-fugitive'
augroup = 'fugitive'

[[plugins]]
repo = 'jez/vim-github-hub'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

# [[plugins]]
# repo = 'rhysd/clever-f.vim'

[[plugins]]
repo = 'LeafCage/foldCC'
# lazy = 1

[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
# depends = ['vim-fugitive', 'tagbar', 'vim-anzu']

[[plugins]]
repo = 'thinca/vim-prettyprint'
lazy = 1
on_cmd = 'PP'
# PPをactionで使うために必要
on_source = 'denite.nvim'

[[plugins]]
repo = 'mattn/webapi-vim'

# colorscheme {{{1
# ============================================================================
[[plugins]]
repo = 'tmsanrinsha/molokai'
name = 'my_molokai'

# [[plugins]]
# repo = 'tmsanrinsha/vim-monokai'

[[plugins]]
repo = 'altercation/vim-colors-solarized'

# [[plugins]]
# repo = 'reedes/vim-colors-pencil'

# }}}

[[plugins]]
repo = 'h1mesuke/vim-alignta'
# lazy = 1

[[plugins]]
repo = 'vim-scripts/transpose-words'
# lazy = 1
hook_add = '''
nmap <S-Tab> <Plug>Transposewords
imap <S-Tab> <Plug>Transposewords
let g:transwrd_wordpattern = '\k\+\%((\k\+)\)\?'
'''

# 起動時, 開いたとき {{{1
# ============================================================================
[[plugins]]
repo = 'thinca/vim-singleton'

[[plugins]]
repo = 'kopischke/vim-fetch'
# lazy = 1

# 保存時 {{{1
# ============================================================================
[[plugins]]
repo = 'vim-scripts/sudo.vim'
# lazy = 1

[[plugins]]
repo = 'vim-scripts/PreserveNoEOL'
if = '!exists("&fixeol")'
hook_add = '''
let g:PreserveNoEOL = 1
'''

# [[plugins]]
# repo = 'haya14busa/vim-bkup'
# hook_add = '''
# let g:bkup#dir = expand($VIM_CACHE_DIR . '/bkup')
# '''

# filetype {{{1
# =============================================================================
## debug {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'joonty/vdebug'
lazy = 1
hook_add = '''
nmap <F5>  <Plug>(vdebug-run)
nmap <F10> <Plug>(vdebug-set_breakpoint)
'''
on_map = { n = '<Plug>' }
hook_source = '''
nnoremap <Plug>(vdebug-set_run) :python debugger.run()<CR>
nnoremap <Plug>(vdebug-set_breakpoint) :python debugger.set_breakpoint()<CR>

let g:vdebug_options= {
\    "port" : 9000,
\    "timeout" : 20,
\    "on_close" : 'detach',
\    "break_on_open" : 1,
\    "ide_key" : '',
\    "path_maps" : {},
\    "debug_window_level" : 0,
\    "debug_file_level" : 0,
\    "debug_file" : "",
\    "watch_window_style" : 'expanded',
\    "marker_default" : '⬦',
\    "marker_closed_tree" : '▸',
\    "marker_open_tree" : '▾'
\}
" let g:vdebug_options['break_on_open']= 0

let g:vdebug_keymap = {
\    "step_over" : "<F2>",
\    "step_into" : "<F3>",
\    "step_out" : "<F4>",
\    "run" : "<F5>",
\    "close" : "<F6>",
\    "detach" : "<F7>",
\    "run_to_cursor" : "<F9>",
\    "set_breakpoint" : "<F10>",
\    "get_context" : "<F11>",
\    "eval_under_cursor" : "<F12>",
\    "eval_visual" : "<Leader>e",
\}

autocmd MyVimrc BufWinEnter DebuggerBreakpoints
\   nnoremap <buffer> dd ^:BreakpointRemove <C-r><C-w><CR>
'''

## vim-precious {{{2
# -----------------------------------------------------------------------------
# [[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
# repo = 'osyo-manga/vim-precious'
# depends = ['context_filetype.vim']

## arduino {{{2
# ----------------------------------------------------------------------------
# [[plugins]]
# repo = '4Evergreen4/vim-hardy'

## chef {{{2
# ============================================================================
[[plugins]]
repo = 'vadv/vim-chef'

## confluence {{{2
# ----------------------------------------------------------------------------
[[plugins]]
repo = 'vim-scripts/confluencewiki.vim'

## Fluentd {{{2
# ----------------------------------------------------------------------------
[[plugins]]
repo = 'yoppi/fluentd.vim'

## Go lang {{{2
# ============================================================================
[[plugins]]
repo = 'fatih/vim-go'
# lazyにするとcommandの設定がうまくいかなかったのでしない
lazy = 1
on_cmd = 'go'
if = "MyHasPatch('patch-7.4.1689')"

[[plugins]]
repo = 'zchee/deoplete-go'
build = 'make'
lazy = 1
on_ft = 'go'

## graphviz {{{2
# -----------------------------------------------------------------------------
# [[plugins]]
# repo = 'wannesm/wmgraphviz.vim'

## java {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
lazy = 1
on_ft = 'java'

## javascript {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'pangloss/vim-javascript'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'nono/jquery.vim'

[[plugins]]
repo = 'felixge/vim-nodejs-errorformat'

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
lazy = 1
if = 'executable("npm")'
on_ft = 'javascript'
build = 'npm install -g tern'
hook_source = 'call SourceRc("plugins/deoplete-ternjs_hook_source.vim")'

[[plugins]]
repo = 'moll/vim-node'
lazy = 1
on_ft = 'javascript'
augroup = 'Node'

## JSON {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'elzr/vim-json'

## Markdown {{{2
# -----------------------------------------------------------------------------
[[plugins]]
# repo = 'plasticboy/vim-markdown'
repo = 'tmsanrinsha/vim-markdown'
# 設定はvimrcに記述

# yaml frontmatterがヘッダーと判定されてしまうのでコメントアウト
# [[plugins]]
# repo = 'nelstrom/vim-markdown-folding'

## MQL4 {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'vobornik/vim-mql4'

## Octave {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'tmsanrinsha/octave.vim--'

## Perl {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'vim-perl/vim-perl'
build = 'make clean carp dancer highlight-all-pragmas moose test-more try-tiny'

[[plugins]]
repo = 'c9s/perlomni.vim'

## PHP {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'shawncplus/phpcomplete.vim'
if = '!EnableDeoplete()'

[[plugins]]
repo = 'lvht/phpcd.vim'
lazy = 1
on_ft = 'php'
build = 'composer install'
if = 'EnableDeoplete() && executable("composer")'

# [[plugins]]
# repo = 'mkusher/padawan.vim'
# if = '$PHP55 && has("python")'
# on_ft = 'php'
# hook_source = '''
# let g:padawan#enabled = 1
# let g:padawan#composer_command = 'composer'
# let g:padawan#timeout = 0.3
# '''
# # [does not obey @property dockblock · Issue #26 · mkusher/padawan.php](https://github.com/mkusher/padawan.php/issues/26)
# # [Completion scopes and built\-in php functions by mkusher · Pull Request \#14 · mkusher/padawan\.php](https://github.com/mkusher/padawan.php/pull/14#event-612270301)

[[plugins]]
repo = 'stephpy/vim-php-cs-fixer'
lazy = 1
on_cmd = ['PhpCsFixerFixDirectory', 'PhpCsFixerFixFile']

# [[plugins]]
# repo = 'StanAngeloff/php.vim'

## Python {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'zchee/deoplete-jedi'
if = 'EnableDeoplete()'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python']
hook_source = 'call SourceRc("plugins/jedi_hook_source.vim")'

[[plugins]]
repo = 'lambdalisue/vim-pyenv'
depends = ['jedi-vim']
on_ft = ['python']

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'

# [[plugins]]
# repo = 'wilywampa/vim-ipython'

## R lang {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'jcfaria/Vim-R-plugin'

## Ruby {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'osyo-manga/vim-monster'
lazy = 1
on_ft = 'ruby'
# # debug
# let g:monster#debug#enable=1 
# echo monster#debug#log()
# call monster#debug#clear_log()#
#
# # rcodetools進んでいるリポジトリ
# https://github.com/raa0121/rcodetools
#
# # rsenseのvim plugin
# https://github.com/marcus/rsense

[[plugins]]
repo = 'vim-ruby/vim-ruby'

[[plugins]]
repo = 'rhysd/unite-ruby-require.vim'
# hook_source = '''
# let g:unite_source_ruby_require_cmd = '/usr/local/opt/ruby/bin/ruby'
# '''

## shell {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'chrisbra/vim-sh-indent'

## solidity {{{2
# -----------------------------------------------------------------------------
# [[plugins]]
# repo = 'tomlion/vim-solidity'

## SQL hive {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'autowitch/hive.vim'

## tmux {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'zaiste/tmux.vim'

## toml {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'cespare/vim-toml'

## twig {{{2
# -----------------------------------------------------------------------------
# [[plugins]]
# repo = 'evidens/vim-twig'

## Vim {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'ynkdir/vim-vimlparser'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'thinca/vim-ft-help_fold'

[[plugins]]
repo = 'thinca/vim-localrc'
# lazy = 1

## vimperator {{{2
# -----------------------------------------------------------------------------
[[plugins]]
repo = 'vimperator/vimperator.vim'

# other {{{1
# ============================================================================
[[plugins]]
repo = 'b4b4r07/vim-shellutils'
lazy = 1
on_cmd = ['Vim', 'Ls', 'Mv', 'Cp', 'File', 'Cat', 'Head', 'Tail', 'Touch', 'Mkdir']

[[plugins]]
repo = 'basyura/twibill.vim'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
lazy = 1
on_source = 'unite.vim'
on_map = '<Plug>'

# shell / repl {{{1
# ============================================================================
# vimshell {{{2
# ----------------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/vimshell.vim'
depends = ['vim-vcs', 'unite.vim']
on_cmd = ['VimShell', 'VimShellBufferDir', 'VimShellInteractive', 'VimShellPop']

[[plugins]]
repo = 'Shougo/vim-vcs'
lazy = 1
# }}}

# ipyhonで複数行を送信できない
# [[python] fix sending lines to ipython by lotabout · Pull Request #75 · epeli/slimux](https://github.com/epeli/slimux/pull/75)
# [[plugins]]
# repo = 'epeli/slimux'
# on_cmd = [
#   'SlimuxGlobalConfigure',
#   'SlimuxREPLConfigure',
#   'SlimuxREPLSendBuffer',
#   'SlimuxREPLSendLine',
#   'SlimuxREPLSendParagraph',
#   'SlimuxREPLSendSelection',
#   'SlimuxSendKeys',
#   'SlimuxSendKeysConfigure',
#   'SlimuxSendKeysLast',
#   'SlimuxSendKeysPrompt',
#   'SlimuxShellConfigure',
#   'SlimuxShellLast',
#   'SlimuxShellPrompt',
#   'SlimuxShellRun',
# ]
# hook_add = '''
# noremap [:slimux:] <Nop>
# map <Leader>s [:slimux:]
#
# nnoremap [:slimux:]<CR> :SlimuxREPLSendLine<CR>
# xnoremap [:slimux:]<CR> :SlimuxREPLSendSelection<CR>
# nnoremap [:slimux:]b :SlimuxREPLSendBuffer<CR>
#
# xnoremap <M-CR> <C-o>:SlimuxREPLSendLine<CR>
# '''
# hook_source = '''
# let g:slimux_select_from_current_window = 1
# '''

[[plugins]]
repo = 'jpalardy/vim-slime'
lazy = 1
if = "exists('$TMUX')"
on_ft = ['python']
hook_source = '''
let g:slime_python_ipython = 1
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": split($TMUX, ",")[0], "target_pane": ":.2"}
'''

# [[plugins]]
# repo = 'oplatek/Conque-Shell'
# on_cmd = ['ConqueTerm', 'ConqueTermSplit', 'ConqueTermTab', 'ConqueTermVSplit']
# hook_source = 'call SourceRc('plugins/Conque-Shell_hook_source.vim'')

# operator {{{1
# ============================================================================
[[plugins]]
repo = 'rhysd/vim-operator-surround'
lazy = 1
depends = 'vim-operator-user'
on_map = '<plug>(operator-surround-'

[[plugins]]
repo = 'tyru/operator-camelize.vim'
lazy = 1
depends = 'vim-operator-user'
on_map = '<Plug>(operator-camelize-'

[[plugins]]
repo = 'kana/vim-operator-replace'
lazy = 1
depends = 'vim-operator-user'
on_map = '<Plug>(operator-replace)'

[[plugins]]
repo = 'osyo-manga/vim-operator-search'
lazy = 1
depends = 'vim-operator-user'
on_map = '<Plug>(operator-search)'

[[plugins]]
repo = 'tyru/caw.vim'
lazy = 1
depends = ['vim-operator-user', 'vim-repeat', 'context_filetype.vim']
on_map = '<Plug>(caw:'
hook_add = '''
    nmap gc <Plug>(caw:hatpos:toggle:operator)
    xmap gc <Plug>(caw:hatpos:toggle:operator)
    nmap gcc <Plug>(caw:hatpos:toggle)
    nmap <C-_> yy<Plug>(caw:hatpos:toggle)p
    xmap <C-_> ygv<Plug>(caw:hatpos:toggle)gv<C-c>p
'''

# [[plugins]]
# repo = 'tomtom/tcomment_vim'
# on_map = ['<Plug>TComment_', 'gc']

# textobj {{{1
# ============================================================================
[[plugins]]
repo = 'osyo-manga/vim-textobj-context'
on_map = '<Plug>(textobj-context-'

[[plugins]]
repo = 'kana/vim-textobj-lastpat'
on_map = '<Plug>(textobj-lastpat-'

[[plugins]]
repo = 'glts/vim-textobj-comment'
on_map = '<Plug>(textobj-comment-'
# }}}

[[plugins]]
repo = 'kana/vim-smartword'
lazy = 1
[plugins.on_map]
nxo = '<Plug>'

# bufferを閉じてもレイアウトを崩さない
[[plugins]]
repo = 'moll/vim-bbye'
lazy = 1
on_cmd = 'Bdelete'
hook_add = '''
    nnoremap <Leader>bd :<C-U>Bdelete<CR>
'''

# tmsanrinsha/vim-fakeclip {{{
[[plugins]]
repo = 'tmsanrinsha/vim-fakeclip'
if = "$SSH_CLIENT != ''"
on_map = '<Plug>'
hook_add = '''
    xmap  "&D           <Plug>(fakeclip-screen-D)
    nmap  "&D           <Plug>(fakeclip-screen-D)
    nmap  "&dd          <Plug>(fakeclip-screen-dd)
    xmap  "&d           <Plug>(fakeclip-screen-d)
    nmap  "&d           <Plug>(fakeclip-screen-d)
    xmap  "&[P          <Plug>(fakeclip-screen-[P)
    xmap  "&[p          <Plug>(fakeclip-screen-[p)
    xmap  "&]P          <Plug>(fakeclip-screen-]P)
    xmap  "&]p          <Plug>(fakeclip-screen-]p)
    xmap  "&gP          <Plug>(fakeclip-screen-gP)
    xmap  "&gp          <Plug>(fakeclip-screen-gp)
    xmap  "&P           <Plug>(fakeclip-screen-P)
    xmap  "&p           <Plug>(fakeclip-screen-p)
    nmap  "&[P          <Plug>(fakeclip-screen-[P)
    nmap  "&[p          <Plug>(fakeclip-screen-[p)
    nmap  "&]P          <Plug>(fakeclip-screen-]P)
    nmap  "&]p          <Plug>(fakeclip-screen-]p)
    nmap  "&gP          <Plug>(fakeclip-screen-gP)
    nmap  "&gp          <Plug>(fakeclip-screen-gp)
    nmap  "&P           <Plug>(fakeclip-screen-P)
    nmap  "&p           <Plug>(fakeclip-screen-p)
    xmap  "&Y           <Plug>(fakeclip-screen-Y)
    xmap  "&y           <Plug>(fakeclip-screen-y)
    nmap  "&yy          <Plug>(fakeclip-screen-Y)
    nmap  "&Y           <Plug>(fakeclip-screen-Y)
    nmap  "&y           <Plug>(fakeclip-screen-y)
    xmap  "*D           <Plug>(fakeclip-D)
    nmap  "*D           <Plug>(fakeclip-D)
    nmap  "*dd          <Plug>(fakeclip-dd)
    xmap  "*d           <Plug>(fakeclip-d)
    nmap  "*d           <Plug>(fakeclip-d)
    xmap  "*[P          <Plug>(fakeclip-[P)
    xmap  "*[p          <Plug>(fakeclip-[p)
    xmap  "*]P          <Plug>(fakeclip-]P)
    xmap  "*]p          <Plug>(fakeclip-]p)
    xmap  "*gP          <Plug>(fakeclip-gP)
    xmap  "*gp          <Plug>(fakeclip-gp)
    xmap  "*P           <Plug>(fakeclip-P)
    xmap  "*p           <Plug>(fakeclip-p)
    nmap  "*[P          <Plug>(fakeclip-[P)
    nmap  "*[p          <Plug>(fakeclip-[p)
    nmap  "*]P          <Plug>(fakeclip-]P)
    nmap  "*]p          <Plug>(fakeclip-]p)
    nmap  "*gP          <Plug>(fakeclip-gP)
    nmap  "*gp          <Plug>(fakeclip-gp)
    nmap  "*P           <Plug>(fakeclip-P)
    nmap  "*p           <Plug>(fakeclip-p)
    xmap  "*Y           <Plug>(fakeclip-Y)
    xmap  "*y           <Plug>(fakeclip-y)
    nmap  "*yy          <Plug>(fakeclip-Y)
    nmap  "*Y           <Plug>(fakeclip-Y)
    nmap  "*y           <Plug>(fakeclip-y)
    xmap  "+D           <Plug>(fakeclip-D)
    nmap  "+D           <Plug>(fakeclip-D)
    nmap  "+dd          <Plug>(fakeclip-dd)
    xmap  "+d           <Plug>(fakeclip-d)
    nmap  "+d           <Plug>(fakeclip-d)
    xmap  "+[P          <Plug>(fakeclip-[P)
    xmap  "+[p          <Plug>(fakeclip-[p)
    xmap  "+]P          <Plug>(fakeclip-]P)
    xmap  "+]p          <Plug>(fakeclip-]p)
    xmap  "+gP          <Plug>(fakeclip-gP)
    xmap  "+gp          <Plug>(fakeclip-gp)
    xmap  "+P           <Plug>(fakeclip-P)
    xmap  "+p           <Plug>(fakeclip-p)
    nmap  "+[P          <Plug>(fakeclip-[P)
    nmap  "+[p          <Plug>(fakeclip-[p)
    nmap  "+]P          <Plug>(fakeclip-]P)
    nmap  "+]p          <Plug>(fakeclip-]p)
    nmap  "+gP          <Plug>(fakeclip-gP)
    nmap  "+gp          <Plug>(fakeclip-gp)
    nmap  "+P           <Plug>(fakeclip-P)
    nmap  "+p           <Plug>(fakeclip-p)
    xmap  "+Y           <Plug>(fakeclip-Y)
    xmap  "+y           <Plug>(fakeclip-y)
    nmap  "+yy          <Plug>(fakeclip-Y)
    nmap  "+Y           <Plug>(fakeclip-Y)
    nmap  "+y           <Plug>(fakeclip-y)
    imap  <C-R><C-P>&   <Plug>(fakeclip-screen-insert-p)
    map!  <C-R><C-O>&   <Plug>(fakeclip-screen-insert-o)
    map!  <C-R><C-R>&   <Plug>(fakeclip-screen-insert-r)
    map!  <C-R>&        <Plug>(fakeclip-screen-insert)
    imap  <C-R><C-P>*   <Plug>(fakeclip-insert-p)
    map!  <C-R><C-O>*   <Plug>(fakeclip-insert-o)
    map!  <C-R><C-R>*   <Plug>(fakeclip-insert-r)
    map!  <C-R>*        <Plug>(fakeclip-insert)
    imap  <C-R><C-P>+   <Plug>(fakeclip-insert-p)
    map!  <C-R><C-O>+   <Plug>(fakeclip-insert-o)
    map!  <C-R><C-R>+   <Plug>(fakeclip-insert-r)
    map!  <C-R>+        <Plug>(fakeclip-insert)
'''
# }}}

[[plugins]]
repo = 'tmsanrinsha/DirDiff.vim'
lazy = 1
on_cmd = 'DirDiff'

[[plugins]]
repo = 'osyo-manga/vim-marching'
lazy = 1
on_ft = ['c', 'cpp']
hook_source = 'call SourceRc("plugins/marching_hook_source.vim")'

[[plugins]]
repo = 'quark-zju/vim-cpp-auto-include'
lazy = 1
external_commands = 'ruby'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'mattn/emmet-vim'
lazy = 1
on_ft = ['html', 'xml', 'apache', 'php']

[[plugins]]
repo = 'maksimr/vim-jsbeautify'
lazy = 1
external_commands = 'node'
on_ft = ['javascript', 'css', 'html']

# SQL {{{1
# ============================================================================
[[plugins]]
repo = 'tmsanrinsha/dbext.vim'
lazy = 1
on_ft = ['sql', 'markdown']

# vim {{{1
# ============================================================================
[[plugins]]
repo = 'rbtnn/vimconsole.vim'
on_func = 'vimconsole#log'
on_cmd = 'VimConsoleTogggle'

# [[plugins]]
# repo = 'haya14busa/vim-stacktrace'
# build = 'make'
# on_cmd = 'CStacktraceFromhist'
# }}}

[[plugins]]
repo = 'tmsanrinsha/previm'
lazy = 1
on_cmd = ['PrevimOpen']
on_ft = ['markdown']
depends = 'open-browser.vim'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
lazy = 1
on_cmd = ['TableModeToggle', 'Tableize', 'TableAddFormula', 'TableEvalFormulaLine']
on_func = 'tablemode#Toggle'
hook_add = '''
  nnoremap [:table-mode:] <Nop>
  nmap <Leader>t [:table-mode:]
  map [:table-mode:]m :call tablemode#Toggle()<CR>
'''
hook_source = '''
  let g:table_mode_corner = '|'
'''

[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'
lazy = 1
on_cmd = ['AnsiEsc']

[[plugins]]
repo = 'LeafCage/yankround.vim'
lazy = 1
on_map = '<Plug>'
on_sources = 'unite.vim'
# vim_version = '7.3'

[[plugins]]
repo = 'sjl/gundo.vim'
lazy = 1
on_cmd = 'GundoToggle'

[[plugins]]
repo = 'cohama/lexima.vim'
lazy = 1
on_i = 1
hook_source = 'call SourceRc("plugins/lexima_hook_source.vim")'

[[plugins]]
repo = 'thinca/vim-ref'
lazy = 1
on_cmd = ['Ref', 'Man']
hook_source = '''
    if has('mac')
        let g:ref_man_cmd = 'man -P cat'
    endif
    " command! -nargs=* Man Ref man <args>
'''

[[plugins]]
repo = 'kannokanno/vim-helpnew'
lazy = 1
on_cmd = 'HelpNew'

[[plugins]]
repo = "vim-utils/vim-man"
lazy = 1
on_cmd = 'Man'

[[plugins]]
repo = 'thinca/vim-quickrun'
lazy = 1
on_cmd = ['QuickRun', 'QuickRunReplace', 'Capture']
depends = ['vimproc.vim', 'shabadou.vim', 'vim-hier', 'quickfixstatus', 'vim-qfsigns', 'vim-qfstatusline', 'quickrun-outputter-replace_region']
hook_add = '''
cabbrev Echo Capture echo
'''
hook_source = 'call SourceRc("plugins/quickrun_hook_source.vim")'

[[plugins]]
repo = 'osyo-manga/quickrun-outputter-replace_region'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
lazy = 1
depends = ['vim-quickrun', 'vim-bufixlist']
hook_source = 'call SourceRc("plugins/watchdogs_hook_source.vim")'

[[plugins]]
repo = 'cohama/vim-hier'
lazy = 1

[[plugins]]
repo = 'dannyob/quickfixstatus'
lazy = 1

[[plugins]]
repo = 'KazuakiM/vim-qfsigns'
lazy = 1

[[plugins]]
repo = 'KazuakiM/vim-qfstatusline'
lazy = 1
hook_source = '''
    let g:Qfstatusline#Text = 'E'
'''

[[plugins]]
repo = 'vim-scripts/QuickFixCurrentNumber'
lazy = 1
depends = 'vim-scripts/ingo-library'

[[plugins]]
repo = 'inkarkat/vim-ingo-library'

[[plugins]]
repo = 'osyo-manga/vim-bufixlist'
lazy = 1

[[plugins]]
repo = 'thinca/vim-partedit'
lazy = 1
on_cmd = 'Partedit'

[[plugins]]
repo = 'simeji/winresizer'
lazy = 1
on_cmd = 'WinResizerStartResize'
hook_add = '''
  let g:winresizer_start_key = '<M-w>'
  nmap <M-w> :<C-u>WinResizerStartResize<CR>
  if has('terminal')
    tmap <M-w> <C-w>:<C-u>WinResizerStartResize<CR>
  endif
'''

[[plugins]]
repo = 't9md/vim-quickhl'
lazy = 1
on_map = '<Plug>(quickhl-'

# draw {{{1
# ============================================================================
[[plugins]]
repo = 'vim-scripts/DrawIt'
lazy = 1
on_map = ';di'
on_cmd = 'DrawIt'

[[plugins]]
repo = 'shinespark/vim-list2tree'
lazy = 1
on_cmd = 'List2Tree'

# browser {{{1
# ============================================================================
[[plugins]]
repo = 'tyru/open-browser.vim'
lazy = 1
on_cmd = ['OpenBrowser']
on_func = ['openbrowser#search', 'OpenBrowser']
on_map = '<Plug>(openbrowser-'
hook_source = '''
    call SourceRc('plugins/open-browser_hook_source.vim')
'''

[[plugins]]
repo= 'tyru/open-browser-github.vim'
lazy = 1
depends = 'open-browser.vim'
on_cmd = ['OpenGithubFile', 'OpenGithubIssue', 'OpenGithubPullReq']
hook_source = '''
    let g:openbrowser_github_always_use_commit_hash = 0
    let g:openbrowser_github_url_exists_check = 'ignore'
'''

# [[plugins]]
# repo = 'shikato/vim2browser.vim'
# lazy = 1
# on_cmd = ['Vim2BrowserSetVimAppName', 'Vim2ChromeReplaseAll', 'Vim2ChromeReplaseSelected', 'Vim2ChromeAppendAll', 'Vim2ChromeAppendSelected', 'Chrome2VimReplaseAll', 'Chrome2VimReplaseSelected', 'Chrome2VimAppendAll', 'Chrome2VimAppendSelected']
#
# [[plugins]]
# repo = 'shikato/keysender.vim'
# lazy = 1
# on_cmd = ['KeysenderKeystroke', 'KeysenderKeyCode', 'KeysenderSetTargetAppName', 'KeysenderSetVimAppName']

# search, replace {{{1
# ============================================================================
[[plugins]]
repo = 'haya14busa/incsearch.vim'
lazy = 1
on_map = '<Plug>'
depends = ['vim-asterisk', 'vim-anzu']

# [osyo-manga/vim-over: :substitute preview](https://github.com/osyo-manga/vim-over)

[[plugins]]
repo = 'haya14busa/vim-asterisk'
lazy = 1
on_map = '<Plug>'
depends = ['vim-anzu']

[[plugins]]
repo = 'osyo-manga/vim-anzu'
lazy = 1
on_map = '<Plug>'

[[plugins]]
repo = 'thinca/vim-qfreplace'
lazy = 1
on_source = ['unite.vim', 'denite.nvim']
on_cmd = ['Qfreplace']
# 一時的にBufWriteを無効にしたいときは'eventignore'を使うといいかも

# memo {{{1
# ============================================================================
[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'unite.vim'
on_cmd = ['Junkfile', 'JunkfileOpen', 'JunkfileFiletype']

# [[plugins]]
# repo = 'mattn/qiita-vim'
# on_source = 'unite.vim'
# on_cmd = ['Qiita']

[[plugins]]
repo = 'mattn/gist-vim'
depends = 'webapi-vim'
on_cmd = ['Gist']

# [[plugins]]
# repo = 'neilagabriel/vim-geeknote'
# on_cmd = ['Geeknote']
# hook_source = '''
#     call Set_python_path()
# '''
# # }}}

# Git {{{1
# ============================================================================
[[plugins]]
repo = 'gregsexton/gitv'
on_cmd = ['Gitv']
hook_source = '''
    function! GitvGetCurrentHash()
        return matchstr(getline('.'), '\[\zs\w\+\ze\]$')
    endfunction

    autocmd MyVimrc FileType gitv
        \   setlocal iskeyword+=/,-,.
        \|  nnoremap <buffer> <LocalLeader>rb :<C-u>Git rebase -i    <C-r>=GitvGetCurrentHash()<CR><CR>
        \|  nnoremap <buffer> <LocalLeader>rs :<C-u>Git reset        <C-r>=GitvGetCurrentHash()<CR><CR>
        \|  nnoremap <buffer> <LocalLeader>rv :<C-u>Git revert       <C-r>=GitvGetCurrentHash()<CR><CR>
        \|  nnoremap <buffer> <LocalLeader>h  :<C-u>Git cherry-pick  <C-r>=GitvGetCurrentHash()<CR><CR>
        \|  nnoremap <buffer> <LocalLeader>rh :<C-u>Git reset --hard <C-r>=GitvGetCurrentHash()<CR><CR>
'''

[[plugins]]
repo = 'tpope/vim-rhubarb'
on_cmd = ['Gbrowse']

[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = ['Gista']

# [[plugins]]
# repo = 'tmsanrinsha/github-complete.vim'
# on_ft = ['markdown', 'gitcommit']
# }}}

# color {{{1
# ============================================================================
[[plugins]]
repo = 'chrisbra/Colorizer'
lazy = 1
on_cmd = ['ColorHighlight', 'ColorToggle']

# tool {{{1
# ============================================================================
[[plugins]]
repo = 'basyura/TweetVim'
lazy = 1
on_cmd= [
  'TweetVimHomeTimeline',
  'TweetVimVersion',
  'TweetVimAddAccount',
  'TweetVimSwitchAccount',
  'TweetVimHomeTimeline',
  'TweetVimMentions',
  'TweetVimListStatuses',
  'TweetVimUserTimeline',
  'TweetVimSay',
  'TweetVimUserStream',
  'TweetVimCommandSay',
  'TweetVimCurrentLineSay',
  'TweetVimSearch',
]
on_map = '<Plug>'
depends = ['twibill.vim']
hook_source = '''
let g:tweetvim_display_icon = 1
'''

# [[plugins]]
# repo = 'johngrib/vim-game-code-break'
# lazy = 1
# on_cmd = ['VimGameCodeBreak ']

# [[plugins]]
# repo = 'glidenote/memolist.vim'
# on_cmd = ['MemoNew', 'MemoList', 'MemoGrep', 'MemoNewCopyingMeta']
# hook_add = '''
#     nnoremap <Leader>mn  :MemoNew<CR>
#     nnoremap <Leader>ml  :Unite memo<CR>
#     execute 'nnoremap <Leader>mg :<C-u>Unite grep:'.g:memo_directory.'<CR>'
# '''
# hook_source = '''
#     let g:memolist_path = g:memo_directory.'/'.strftime('%Y/%m')
#     let g:memolist_memo_suffix = 'md'
#     let g:memolist_template_dir_path = '~/.vim/template/memolist'
#     let g:memolist_unite = 1
#     let g:memolist_delimiter_yaml_end  = "---"
#     let g:memolist_delimiter_yaml_start = "---"
#     let g:memolist_filename_prefix_none = 1
# '''
